services:
  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
    ports:
      - "8050:8050"
    volumes:
      - ./trading/visualization:/app/trading/visualization
      - ./trading/reporting:/app/trading/reporting
      - ./logs:/app/logs
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
      - DASH_DEBUG=true
      - TZ=Europe/Paris
      - LOG_LEVEL=INFO
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - trading_network
    depends_on:
      - redis

  data_processor:
    build:
      context: .
      dockerfile: docker/data_processor/Dockerfile
      args:
        - PIP_TIMEOUT=300
        - PIP_RETRIES=10
    ports:
      - "8000:5000"
    volumes:
      - ./trading/data:/app/trading/data
      - ./trading/utils:/app/trading/utils
      - ./data:/app/data
      - pip-cache:/root/.cache/pip
    environment:
      - PYTHONPATH=/app
      - TZ=Europe/Paris
      - LOG_LEVEL=INFO
      - PIP_DEFAULT_TIMEOUT=300
    networks:
      - trading_network
    restart: unless-stopped

  model_trainer:
    build:
      context: .
      dockerfile: docker/model_trainer/Dockerfile
    volumes:
      - ./trading/models:/app/trading/models
      - ./trading/training:/app/trading/training
      - ./trading/utils:/app/trading/utils
      - ./models:/app/models
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PYTHONPATH=/app
      - TZ=Europe/Paris
      - LOG_LEVEL=INFO
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - DEBIAN_FRONTEND=noninteractive
    networks:
      - trading_network
    depends_on:
      - mlflow

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
      - ./monitoring/grafana/plugins-bundled:/usr/share/grafana/plugins-bundled
    environment:
      - GF_INSTALL_PLUGINS=marcusolsson-json-datasource
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - TZ=Europe/Paris
    restart: unless-stopped
    networks:
      - trading_network
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m

  tensorboard:
    image: tensorflow/tensorflow:latest
    ports:
      - "6006:6006"
    volumes:
      - ./logs:/logs
    command: tensorboard --logdir=/logs/neural_network --host 0.0.0.0 --reload_interval=5 --samples_per_plugin=images=100,text=100
    networks:
      - trading_network
    environment:
      - TZ=Europe/Paris
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g

  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlruns
      - ./logs/mlflow:/var/log/mlflow
    environment:
      - MLFLOW_TRACKING_URI=sqlite:///mlruns/mlflow.db   
      - TZ=Europe/Paris
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g
    networks:
      - trading_network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - TZ=Europe/Paris
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1g
        reservations:
          memory: 512m
    networks:
      - trading_network

volumes:
  pip-cache:
    driver: local

networks:
  trading_network:
    driver: bridge
