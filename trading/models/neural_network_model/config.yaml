# Configuration du modèle de réseau de neurones
version: "1.0.0"

# Architecture du modèle
model_architecture:
  type: "lstm"  # Type de réseau: lstm, gru, transformer
  input_dim: null  # Sera défini dynamiquement selon les features
  sequence_length: 60  # Nombre de points temporels en entrée
  layers:
    - type: "lstm"
      units: 128
      return_sequences: true
      dropout: 0.2
      recurrent_dropout: 0.1
      activation: "tanh"
    
    - type: "lstm"
      units: 64
      return_sequences: false
      dropout: 0.1
      recurrent_dropout: 0.1
      activation: "tanh"
    
    - type: "dense"
      units: 32
      activation: "relu"
      kernel_regularizer:
        type: "l2"
        value: 0.01
    
    - type: "dense"
      units: 1  # Sortie finale (prédiction)
      activation: "tanh"  # tanh pour [-1,1] ou sigmoid pour [0,1]

# Paramètres d'entraînement
training:
  optimizer:
    type: "adam"
    learning_rate: 0.001
    beta_1: 0.9
    beta_2: 0.999
    epsilon: 1e-07
    amsgrad: false
  
  loss: "mean_squared_error"  # ou "binary_crossentropy" pour classification
  
  metrics:
    - "mean_absolute_error"
    - "mean_squared_error"
    - "accuracy"
  
  batch_size: 32
  epochs: 100
  validation_split: 0.2
  shuffle: true
  
  callbacks:
    early_stopping:
      monitor: "val_loss"
      patience: 10
      min_delta: 0.0001
      restore_best_weights: true
    
    reduce_lr:
      monitor: "val_loss"
      factor: 0.5
      patience: 5
      min_lr: 0.00001
    
    model_checkpoint:
      monitor: "val_loss"
      save_best_only: true
      save_weights_only: false

# Prétraitement des données
preprocessing:
  feature_engineering:
    technical_indicators: true
    price_derivatives: true
    volume_analysis: true
    market_indicators: true
  
  normalization:
    method: "min_max"  # ou "standard"
    feature_range: [-1, 1]
  
  sequence:
    padding: "pre"  # ou "post"
    truncating: "pre"  # ou "post"
    max_length: 60

# Configuration de prédiction
prediction:
  output_type: "regression"  # ou "classification"
  threshold: 0.5  # Pour la classification
  confidence_calculation: "softmax"  # ou "distance"
  horizon: "1h"  # Horizon de prédiction

# Sauvegarde et chargement
model_persistence:
  save_format: "tf"  # ou "h5"
  checkpoint_frequency: 10  # epochs
  max_checkpoints: 3
  save_optimizer_state: true
  version_control: true

# Monitoring et logging
monitoring:
  tensorboard:
    enabled: true
    update_freq: "epoch"
    histogram_freq: 1
  
  metrics_logging:
    enabled: true
    log_frequency: "batch"  # ou "epoch"
    save_predictions: true
  
  performance_tracking:
    track_memory: true
    track_time: true
    profile_model: false

# Configuration matérielle
hardware:
  gpu_memory_limit: 0.8  # Utilisation maximale de la mémoire GPU (80%)
  mixed_precision: true
  num_workers: 4
  pin_memory: true

# Validation et tests
validation:
  cross_validation:
    enabled: true
    n_splits: 5
    shuffle: true
  
  backtesting:
    enabled: true
    windows: [30, 60, 90]  # Jours
    walk_forward: true
